{"version":3,"sources":["gallery.js","progress.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","gridList","width","height","icon","color","Gallery","props","classes","imagePath","picId","className","GridList","cellHeight","GridListTile","key","cols","style","ListSubheader","component","picsIds","length","map","src","alt","GridListTileBar","title","replace","path","actionIcon","IconButton","onClick","e","handleDeleteFile","LinearProgressWithLabel","tasksToDo","tasksDone","precantage","Box","alignItems","mr","LinearProgress","variant","value","minWidth","Typography","Math","round","App","handleWatermarkChanged","event","fetch","method","body","target","files","headers","then","setState","watermark","window","URL","createObjectURL","handleUploadNonWatermarkedPictures","Array","from","file","name","componentDidMount","activateFetchFromServer","timer","setTimeout","fetchImageListFromServer","convertDataToStateAndSetState","data","watermarkPaths","withtoutWatermarkPaths","withWatermarkPaths","filePath","startsWith","push","console","error","withWatermark","withoutWatermark","JSON","stringify","respons","json","state","padding","Grid","container","spacing","item","xs","direction","this","type","onChange","id","multiple","action","class","React","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","process","href","origin","addEventListener","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","i","Worker"],"mappings":"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","file":"static/js/main.bdd59d01.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport IconButton from '@material-ui/core/IconButton';\nimport HighlightOffButton from '@material-ui/icons/HighlightOff';\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'space-around',\n        overflow: 'hidden',\n        backgroundColor: theme.palette.background.paper,\n    },\n    gridList: {\n        width: 500,\n        height: 600,\n    },\n    icon: {\n        color: 'rgba(255, 255, 255, 0.54)',\n    },\n}));\n\nexport default function Gallery(props) {\n    const classes = useStyles();\n    const imagePath = (picId) => \"/files\" + picId\n\n    return (\n        <div className={classes.root}>\n            <GridList cellHeight={150} className={classes.gridList}>\n                <GridListTile key=\"Subheader\" cols={2} style={{ height: 'auto' }}>\n                <ListSubheader component=\"div\">{props.picsIds.length} Files</ListSubheader>\n                </GridListTile>\n                {props.picsIds.map((picId) => (\n                    <GridListTile  key={picId}>\n                        <img src={imagePath(picId)} alt={picId} />\n                        <GridListTileBar\n                            title={picId.replace(props.path, \"\")}\n                            actionIcon={\n                                <IconButton onClick={(e) => props.handleDeleteFile(\"/files\" + picId)}>\n                                    <HighlightOffButton className={classes.title} />\n                                </IconButton>\n                            }\n                        />\n                    </GridListTile>\n                ))}\n            </GridList>\n        </div>\n    );\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\n\nexport default function LinearProgressWithLabel(props) {\n\n  if (props.tasksToDo == props.tasksDone || props.tasksToDo == 0)\n    return (<div></div>); \n\n  const precantage = (props.tasksDone*100)/(props.tasksToDo + props.tasksDone)\n\n  return (\n    <Box display=\"flex\" alignItems=\"center\">\n      <Box width=\"100%\" mr={5}>\n        <LinearProgress variant=\"determinate\" {...props} value={precantage} />\n      </Box>\n      <Box minWidth={35}>\n        <Typography variant=\"body2\" color=\"textSecondary\">{`${Math.round(\n          precantage\n        )}%`}</Typography>\n      </Box>\n    </Box>\n  );\n}\n\nLinearProgressWithLabel.propTypes = {\n  /**\n   * The value of the progress indicator for the determinate and buffer variants.\n   * Value between 0 and 100.\n   */\n  value: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport Gallery from './gallery';\nimport Progress from './progress';\nimport './App.css';\nimport Grid from '@material-ui/core/Grid';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      watermark: [],\n      withoutWatermark: [],\n      withWatermark: [],\n    }\n    let timer = null;\n  }\n\n  handleWatermarkChanged = (event) => {\n    fetch(\"/files/watermark.png\", {\n      method: 'POST',\n      body: event.target.files[0],\n      headers: {\n        'content-type': 'image/png'\n      }\n    }).then(\n      this.setState({\n        watermark: [window.URL.createObjectURL(event.target.files[0])]\n      })\n    )\n  }\n\n  handleUploadNonWatermarkedPictures = (event) => {\n    for (let file of Array.from(event.target.files)) {\n      fetch(\"/files/withoutWatermark/\" + file.name, {\n        method: 'POST',\n        body: file,\n        headers: {\n          'content-type': 'image/png'\n        }\n      })\n    }\n  }\n\n  componentDidMount = () => {\n    this.activateFetchFromServer()\n  }\n\n  activateFetchFromServer = () => (\n    this.timer = setTimeout(() => {\n      this.fetchImageListFromServer()\n      this.activateFetchFromServer()\n    }, 1000)\n  )\n\n\n  convertDataToStateAndSetState = (data) => {\n    let watermarkPaths = []\n    const withtoutWatermarkPaths = []\n    const withWatermarkPaths = []\n    for (let filePath of data.files) {\n      if (filePath.startsWith(\"/watermark\")) {\n        watermarkPaths.push(filePath);\n      }\n      else if (filePath.startsWith(\"/withoutWatermark\")) {\n        withtoutWatermarkPaths.push(filePath)\n      }\n      else if (filePath.startsWith(\"/withWatermark\")) {\n        withWatermarkPaths.push(filePath)\n      } else {\n        console.error(\"unkown filepath \" + filePath)\n      }\n    }\n    return this.setState({\n      watermark: watermarkPaths,\n      withWatermark: withWatermarkPaths,\n      withoutWatermark: withtoutWatermarkPaths\n    })\n\n  }\n\n  fetchImageListFromServer = () => {\n    fetch(\"/list\", {\n      method: 'POST',\n      body: JSON.stringify({ path: \"/\" }),\n      headers: {\n        'Content-Type': 'application/json'\n      },\n    }).then(respons => respons.json()).then(this.convertDataToStateAndSetState)\n  }\n\n  handleDeleteFile = (path) => {\n    fetch(path, { method: 'DELETE' }).then(this.fetchImageListFromServer())\n  }\n\n  render() {\n    return (\n      <div style={{ padding: 30 }}>\n        <Grid container spacing={2}>\n          <Grid container item xs={3} direction=\"column\">\n            <h2>Watermark</h2>\n            <Gallery\n              {...this.state}\n              path=\"/watermark/\"\n              picsIds={this.state.watermark}\n              handleDeleteFile={this.handleDeleteFile}\n            ></Gallery>\n            <div className=\"upload-btn-wrapper\">\n              <button className=\"btn\">Upload Watermark</button>\n              <input type=\"file\" onChange={this.handleWatermarkChanged} />\n            </div>\n\n          </Grid>\n          <Grid container item xs={4} direction=\"column\">\n            <h2>Photos</h2>\n            <Gallery\n              {...this.state}\n              path=\"/withoutWatermark/\"\n              picsIds={this.state.withoutWatermark}\n              handleDeleteFile={this.handleDeleteFile}\n            >\n            </Gallery>\n            <div className=\"upload-btn-wrapper\">\n              <button className=\"btn\">Upload Photos</button>\n              <input id=\"file-upload\" type=\"file\" multiple onChange={this.handleUploadNonWatermarkedPictures} />\n            </div>\n          </Grid>\n          <Grid container item xs={4} direction=\"column\">\n            <h2>Ready to Download</h2>\n            <Gallery\n              {...this.state}\n              path=\"/withWatermark/\"\n              picsIds={this.state.withWatermark}\n              handleDeleteFile={this.handleDeleteFile}\n            >\n            </Gallery>\n            <form action=\"download_all\" method=\"POST\">\n              <div className=\"upload-btn-wrapper\">\n                <input class=\"btn\" type=\"submit\" id=\"download\" value=\"Download all files\" />\n              </div>\n           </form>\n          </Grid>\n        </Grid>\n        <Progress\n              {...this.state}\n              tasksDone={this.state.withWatermark.length}\n              tasksToDo={this.state.withoutWatermark.length}\n            >\n        </Progress>\n\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/server.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n\nfor(var i=0; i < 5; i++){\n  new Worker('worker.js');\n}\n"],"sourceRoot":""}